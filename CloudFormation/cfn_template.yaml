Description: This template deploys a VPC, with a pair of public and private subnets spread across two Availability Zones. It deploys an Internet Gateway, NAT Gateway, Route Tables,
  a Security Group, a Load Balancer, a Target Group and an EC2 Instance, which allows public access from the internet to a web app.

# Add parameters
Parameters:
  VpcName:
    Description: Please enter the name of the VPC
    Type: String
    Default: vpc-test

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 195.0.0.0/25
  
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the first public subnet
    Type: String
    Default: 195.0.0.0/27

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the second public subnet
    Type: String
    Default: 195.0.0.80/28

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the first private subnet
    Type: String
    Default: 195.0.0.32/27

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the second private subnet
    Type: String
    Default: 195.0.0.64/28

# Create a VPC
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: 'false'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: !Ref VpcName

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ig-test

# Attach Internet Gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicSubnet1
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1

# Create Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: “ap-southeast-2a”
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Pub-Sub-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: “ap-southeast-2b”
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Pub-Sub-2

# Create Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: “ap-southeast-2a”
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: Priv-Sub-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: “ap-southeast-2b”
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: Priv-Sub-2
  
  # Create Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Pub-Route-Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Priv-Route-Table
  
  # Add routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  
  # Associate Subnets to Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  
  # Create Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default Security Group for Load Balancer
      GroupName: load-balancer-sg
      SecurityGroupEgress:
        - CidrIp: 195.0.0.0/25
          ToPort: 80
          FromPort: 80
          Description: HTTP
          IpProtocol: tcp
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          ToPort: 80
          FromPort: 80
          Description: HTTP
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: load-balancer-sg
      VpcId: !Ref VPC
  
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 Instance
      GroupName: ec2-instance-sg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: All traffic
          IpProtocol: “-1”
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: All traffic
          IpProtocol: “-1"
      Tags:
        - Key: Name
          Value: ec2-instance-sg
      VpcId: !Ref VPC